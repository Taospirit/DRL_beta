env: Pendulum-v0 
state_space: 3, action_space: 1
episodes: 5000, max_step: 300
===============================
buffer: <drl.utils.ReplayBuffer object at 0x7fc897a79fd0> 
lr: 0.003 
eps: 1.1920928955078125e-07 
tau: 0.01 
actor_learn_freq: 1 
target_update_freq: 10 
_gamma: 0.99 
_gae_lamda: 1 
_target: True 
_update_iteration: 10 
_sync_cnt: 0 
_learn_critic_cnt: 0 
_learn_actor_cnt: 0 
_verbose: False 
_batch_size: 128 
device: cuda 
actor_eval: ActorGaussian(
  (fc1): Linear(in_features=3, out_features=256, bias=True)
  (fc2): Linear(in_features=256, out_features=256, bias=True)
  (mean): Linear(in_features=256, out_features=1, bias=True)
  (log_std): Linear(in_features=256, out_features=1, bias=True)
) 
critic_eval: CriticQTwin(
  (net1): Sequential(
    (0): Linear(in_features=4, out_features=256, bias=True)
    (1): ReLU()
    (2): Linear(in_features=256, out_features=256, bias=True)
    (3): ReLU()
    (4): Linear(in_features=256, out_features=1, bias=True)
  )
  (net2): Sequential(
    (0): Linear(in_features=4, out_features=256, bias=True)
    (1): ReLU()
    (2): Linear(in_features=256, out_features=256, bias=True)
    (3): ReLU()
    (4): Linear(in_features=256, out_features=1, bias=True)
  )
) 
value_eval: ValueNet(
  (linear1): Linear(in_features=3, out_features=256, bias=True)
  (linear2): Linear(in_features=256, out_features=256, bias=True)
  (linear3): Linear(in_features=256, out_features=1, bias=True)
) 
value_target: ValueNet(
  (linear1): Linear(in_features=3, out_features=256, bias=True)
  (linear2): Linear(in_features=256, out_features=256, bias=True)
  (linear3): Linear(in_features=256, out_features=1, bias=True)
) 
actor_eval_optim: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.003
    weight_decay: 0
) 
critic_eval_optim: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.003
    weight_decay: 0
) 
value_eval_optim: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.003
    weight_decay: 0
) 
criterion: SmoothL1Loss() 
target_entropy: -1.0 
log_alpha: tensor([0.], device='cuda:0', requires_grad=True) 
alpha_optim: Adam (
Parameter Group 0
    amsgrad: False
    betas: (0.9, 0.999)
    eps: 1e-08
    lr: 0.003
    weight_decay: 0
) 
alpha: 0.2 
